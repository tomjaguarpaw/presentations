\documentclass[10pt]{beamer}

\usepackage{minted}

\title{Opaleye\\Haskell Embedded Relational Query Language}

\author{Tom Ellis}

\date{}

\begin{document}

\newcommand{\image}[1]{\includegraphics[scale=0.4]{#1}}

% TODO: \large{ ... contents ...} should be {\large ... contents ... }

{\Large \maketitle}



\begin{frame}[fragile]

\large{
\begin{itemize}
\item What: Haskell embedded domain specific language (EDSL)
  for generating SQL
\item Why: Want to write relational queries with all the benefits of
  Haskell, especially type safety and composability
\item Where: In production for over a year
\item How: Some theory; reused some internal datastructures from
  HaskellDB
\end{itemize}
}

\end{frame}



\begin{frame}[fragile]
\frametitle{Type safety}

\large{
Type errors prevented at compile time

\begin{itemize}
\item
\begin{minted}{haskell}
    quantity :: Col Int
    personName :: Col String
    quantity .== personName
\end{minted}

\item
\begin{minted}{haskell}
    cityId :: Col CityId
    personId :: Col PersonId
    cityId .== personId
\end{minted}

\item
\begin{minted}{haskell}
    nullableName :: Col (Nullable String)
    name :: Col String
    nullableName .== name
\end{minted}

\end{itemize}
}

\end{frame}



\begin{frame}[fragile]
\frametitle{Type safety}

Useful information about behaviour (like \texttt{IO})

\begin{itemize}
\item ``Expression'': Checking a sum is less than a limit is
  ``pure''. Result does not depend on the data the database.

\begin{minted}{haskell}
checkLimit :: Col Double -> Col Double -> Col Bool
checkLimit x y = (x + y) .< 10
\end{minted}

\item ``Query'': Returning all active users is ``impure''.  Result
  depends on the data in the database.

\begin{minted}{haskell}
activeUsers :: QueryArr () (Col User)
activeUsers = proc () -> do
    user <- userTable -< ()
    restrict <<< isActive -< user
    returnA -< user
\end{minted}

\end{itemize}

\end{frame}



\begin{frame}[fragile]

\large{
\begin{minted}{sql}
SELECT personTable.height / personTable.age,
       departmentTable.name
FROM   departmentTable, personTable
WHERE  departmentTable.head = personTable.id
\end{minted}
}

\vspace{2em}
\center{
\image{Images/department.pdf}
}

\end{frame}

\begin{frame}[fragile]

\large{
\begin{minted}{sql}
SELECT addressTable.address
FROM   addressTable, personTable
WHERE  addressTable.head = personTable.id
AND    personTable.height / personTable.age < 10 
\end{minted}
}

\vspace{2em}
\center{
\image{Images/address.pdf}
}

\end{frame}

\begin{frame}[fragile]

\center{
\image{Images/departmentSelection.pdf} \\
\vspace{3em}
\image{Images/addressSelection.pdf} \\
\vspace{3em}
\image{Images/growthRate.pdf}
}

\end{frame}


\begin{frame}[fragile]

\begin{minted}{haskell}
growthRate :: QueryArr (Col PersonId) (Col Double)
growthRate = proc personId -> do
    (id, height, age) <- personTable -< ()
    restrict <<< (personId .== id)
    returnA -< height / age
\end{minted}

\vspace{2em}
\center{
\image{Images/growthRate.pdf}
}

\end{frame}



\begin{frame}[fragile]

\begin{minted}{haskell}
type Query = QueryArr ()

departmentQuery :: Query (Col Double, Col String)
departmentQuery = proc () -> do
    (head, name) <- addressTable -< ()
    rate <- growthRate -< head
    returnA -< (rate, name)
\end{minted}

\vspace{1em}
\center{
\image{Images/departmentFactor.pdf}\\
\vspace{3em}
\image{Images/departmentSelection.pdf}
}

\end{frame}

\begin{frame}[fragile]
\begin{minted}{haskell}
addressQuery :: Query (Col Address)
addressQuery = proc () -> do
    (personId, address) <- addressTable -< ()
    rate <- growthRate -< personId
    restrict <<< (rate .<= 10)
    returnA -< address
\end{minted}

\vspace{2em}
\center{
\image{Images/addressFactor.pdf}\\
\vspace{3em}
\image{Images/addressSelection.pdf}
}

\end{frame}



\begin{frame}[fragile]

\large{
\begin{minted}{haskell}
personTable
  :: Query (Col PersonId, Col String, Col CityId)

runQueryDefault personTable
  :: IO [(PersonId, String, CityId)]
\end{minted}

\begin{minted}{sql}
SELECT personId, personName, personCityId
FROM personTable
\end{minted}

\begin{minted}{haskell}
[ (PersonId 1, "Alice",   CityId 1),
  (PersonId 2, "Bob",     CityId 1),
  (PersonId 3, "Charlie", CityId 2),
  (PersonId 4, "Dan",     CityId 3) ]
\end{minted}

% Mention this verbally instead
%
% \begin{itemize}
% \item There are no restrictions on what Haskell datatypes you can
%   store Cols in.  You can use Haskell records, lenses, etc.\ ...
% \end{itemize}
}
\end{frame}

%% Mention this verbally instead
%%
%% \begin{frame}
%% \frametitle{A query}

%% \Large{
%% \begin{itemize}
%% \item for each person
%% \item look up their city
%% \item look up that city's country
%% \item return ``\emph{person name} lives in \emph{country name}''
%% \end{itemize}
%% }
%%
%% \end{frame}

\begin{frame}[fragile]

\begin{minted}{haskell}
countries :: Query (Col String)
countries = proc () -> do
  (_, personName, personCityId)  <- personTable  -< ()
  (cityId, _,     cityCountryId) <- cityTable    -< ()
  (countryId, _,  countryCode)   <- countryTable -< ()

  restrict <<< (personCityId .== cityId)
  restrict <<< (cityCountryId .== countryId)

  returnA -< personName .++ " lives in " .++ countryCode
\end{minted}

\vspace{2em}

\begin{minted}{sql}
SELECT personName || ' lives in ' || countryName
FROM   personTable, cityTable, countryTable
WHERE  personTable.cityId = cityTable.id
AND    cityTable.countryId = countryTable.id
\end{minted}

\end{frame}


\begin{frame}[fragile]

\begin{minted}{haskell}

livesIn :: Col String -> Col String -> Col String
livesIn personName countryName = personName
                                 .++ " lives in "
                                 .++ countryName

countryOfCity :: QueryArr (Col CityId) (Col CountryId)
countryOfCity = proc cityId -> do
    (cityId', _, cityCountryId) <- countryTable -< ()
    restrict <<< (cityId .== cityId')
    returnA -< cityCountryId

countryNameOfCountry :: QueryArr (Col CountryId) (Col String)
...

countryNameOfCity :: QueryArr (Col CityId) (Col String)
countryNameOfCity = countryNameOfCountry <<< countryOfCity
\end{minted}

\end{frame}


\begin{frame}[fragile]

\large{
\begin{minted}{haskell}
countries :: Query (Col String)
countries = proc () -> do
  (_, personName, personCityId) <- personTable  -< ()
  countryName <- countryNameOfCity -< personCityId
  returnA -< livesIn personName countryName
\end{minted}

\begin{minted}{haskell}
[ "Alice lives in UK",
  "Bob lives in UK",
  "Charlie lives in UK",
  "Dan lives in US" ]
\end{minted}
}

\end{frame}



\begin{frame}
\frametitle{Summary}

\Large{
Opaleye is an approach to relational queries which is

\begin{itemize}
\item type safe
\item composable
\end{itemize}

I didn't have time to talk about

\begin{itemize}
\item aggregation is type safe and composable
\item this is why we use Arrows rather than Monads
\item both HaskellDB and Esqueleto get this wrong
\end{itemize}
}
\end{frame}



\begin{frame}[fragile]
\center{
\image{Images/aggregation.pdf}
}

\vspace{2em}

\begin{minted}{haskell}
partsTable :: QueryArr () (Col Part, Col Location,
                           Col Int, Col Double)

aggregade :: QueryArr () (Col Part, Col Location,
                          Col Int, Col Double)
aggregate (p4 (groupBy, groupBy, sum, max)) partsTable
\end{minted}

\end{frame}


\begin{frame}[fragile]

Can't aggregate.
\begin{minted}{haskell}
QueryArr (Col a, Col b, Col c) (Col Part, Col Location,
                                Col Int, Col Double)
\end{minted}

Can aggregate.  Probably bad.
\begin{minted}{haskell}
Col a -> Col b -> Col c
            -> QueryMonad (Col Part, Col Location,
                           Col Int, Col Double)
\end{minted}

\end{frame}



\end{document}
