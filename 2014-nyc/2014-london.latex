\documentclass[10pt]{beamer}

\usepackage{minted}

\title{Opaleye\\Haskell Embedded Relational Query Language}

\author{Tom Ellis}

\date{}

\begin{document}

\newcommand{\image}[1]{\includegraphics[scale=0.4]{#1}}

% TODO: \large{ ... contents ...} should be {\large ... contents ... }

{\Large \maketitle}



\begin{frame}[fragile]

\large{
\begin{itemize}
\item What: Haskell embedded domain specific language (EDSL)
  for generating SQL
\item Why: Want to write relational queries with all the benefits of
  Haskell, especially type safety and composability
\item Where: In production for over a year
\item How: Some theory; reused some internal datastructures from
  HaskellDB
\end{itemize}
}

\end{frame}



\begin{frame}[fragile]
\frametitle{Type safety}

\Large{
Type errors prevented at compile time

\begin{itemize}
\item
\begin{minted}{haskell}
    quantity :: Wire Int
    personName :: Wire String
    eq -< (quantity, personName)
\end{minted}

\item
\begin{minted}{haskell}
    cityId :: Wire CityId
    personId ::  Wire PersonId
    eq -< (cityId, personId)
\end{minted}

\item
\begin{minted}{haskell}
    nullableName :: Wire (Nullable String)
    name :: Wire String
    eq -< (nullableName, name)
\end{minted}

\end{itemize}
}

\end{frame}



\begin{frame}[fragile]
\frametitle{Type safety}

Useful information about behaviour (like IO)

\begin{itemize}
\item ``Expression'': Checking a sum is less than a limit is
  ``pure''. The result does not depend on the data the database.

\begin{minted}{haskell}
checkLimit :: ExprArr (Wire Double, Wire Double)
                      (Wire Bool)
checkLimit = proc (x, y) -> do
    total <- plus -< (x, y)
    lt -< (total, limit)
\end{minted}

\item ``Query'': Returning all active users is ``impure''.  The result
  depends on the data in the database.

\begin{minted}{haskell}
activeUsers :: QueryArr () (Wire User)
activeUsers = proc () -> do
    user <- userTable -< ()
    restrict <<< isActive -< user
    returnA -< user
\end{minted}

\end{itemize}

\end{frame}



\begin{frame}[fragile]

\large{
\begin{minted}{sql}
SELECT personTable.height / personTable.age,
       departmentTable.name
FROM   departmentTable, personTable
WHERE  departmentTable.head = personTable.id
\end{minted}
}

\vspace{2em}
\center{
\image{Images/department.png}
}

\end{frame}

\begin{frame}[fragile]

\large{
\begin{minted}{sql}
SELECT addressTable.address
FROM   addressTable, personTable
WHERE  addressTable.head = personTable.id
AND    personTable.height / personTable.age < 10 
\end{minted}
}

\vspace{2em}
\center{
\image{Images/address.png}
}

\end{frame}

\begin{frame}[fragile]

\center{
\image{Images/departmentSelection.png} \\
\vspace{3em}
\image{Images/addressSelection.png} \\
\vspace{3em}
\image{Images/growthRate.png}
}

\end{frame}


\begin{frame}[fragile]

\begin{minted}{haskell}
growthRate :: QueryArr (Wire PersonId) (Wire Double)
growthRate = proc personId -> do
    (id, height, age) <- personTable -< ()
    restrict <<< eq -< (personId, id)
    divide -< (height, age)
\end{minted}

\vspace{2em}
\center{
\image{Images/growthRate.png}
}

\end{frame}



\begin{frame}[fragile]

\begin{minted}{haskell}
type Query = QueryArr ()

departmentQuery :: Query (Wire Double, Wire String)
departmentQuery = proc () -> do
    (head, name) <- addressTable -< ()
    rate <- growthRate -< head
    returnA -< (rate, name)
\end{minted}

\vspace{1em}
\center{
\image{Images/departmentFactor.png}\\
\vspace{3em}
\image{Images/departmentSelection.png}
}

\end{frame}

\begin{frame}[fragile]
\begin{minted}{haskell}
addressQuery :: Query (Wire Address)
addressQuery = proc () -> do
    (personId, address) <- addressTable -< ()
    rate <- growthRate -< personId
    restrict <<< leqC 10 -< ratio
    returnA -< address
\end{minted}

\vspace{2em}
\center{
\image{Images/addressFactor.png}\\
\vspace{3em}
\image{Images/addressSelection.png}
}

\end{frame}



\begin{frame}[fragile]

\large{
\begin{minted}{haskell}
personTable
  :: Query (Wire PersonId, Wire String, Wire CityId)

runQueryDefault personTable
  :: IO [(PersonId, String, CityId)]
\end{minted}

\begin{minted}{sql}
SELECT personId, personName, personCityId
FROM personTable
\end{minted}

\begin{minted}{haskell}
[ (PersonId 1, "Alice",   CityId 1),
  (PersonId 2, "Bob",     CityId 1),
  (PersonId 3, "Charlie", CityId 2),
  (PersonId 4, "Dan",     CityId 3) ]
\end{minted}

% Mention this verbally instead
%
% \begin{itemize}
% \item There are no restrictions on what Haskell datatypes you can
%   store Wires in.  You can use Haskell records, lenses, etc.\ ...
% \end{itemize}
}
\end{frame}

%% Mention this verbally instead
%%
%% \begin{frame}
%% \frametitle{A query}

%% \Large{
%% \begin{itemize}
%% \item for each person
%% \item look up their city
%% \item look up that city's country
%% \item return ``\emph{person name} lives in \emph{country name}''
%% \end{itemize}
%% }
%%
%% \end{frame}

\begin{frame}[fragile]

\begin{minted}{haskell}
countries :: Query (Wire String)
countries = proc () -> do
  (_, personName, personCityId) <- personTable  -< ()
  (cityId, _, cityCountryId)    <- cityTable    -< ()
  (countryId, _, countryCode)   <- countryTable -< ()

  restrict <<< eq -< (personCityId, cityId)
  restrict <<< eq -< (cityCountryId, countryId)

  livesInString <- constant " lives in " -< ()
  cat3 -< (personName, livesInString, countryCode)
\end{minted}

\vspace{2em}

\begin{minted}{sql}
SELECT personName || ' lives in ' || countryName
FROM   personTable, cityTable, countryTable
WHERE  personTable.cityId = cityTable.id
AND    cityTable.countryId = countryTable.id
\end{minted}

\end{frame}


\begin{frame}[fragile]

\begin{minted}{haskell}

livesIn :: QueryArr (Wire String, Wire String) (Wire String)
livesIn = proc (personName, countryName) -> do
    livesInString <- constant " lives in " -< ()
    cat3 -< (personName, livesInString, countryName)

countryOfCity :: QueryArr (Wire CityId) (Wire CountryId)
countryOfCity = proc cityId -> do
    (cityId', _, cityCountryId)   <- countryTable -< ()
    restrict <<< eq -< (cityId, cityId')
    returnA -< cityCountryId

countryNameOfCountry :: QueryArr (Wire CountryId) (Wire String)
...

countryNameOfCity :: QueryArr (Wire CityId) (Wire String)
countryNameOfCity = countryNameOfCountry <<< countryOfCity
\end{minted}

\end{frame}


\begin{frame}[fragile]

\large{
\begin{minted}{haskell}
countries :: Query (Wire String)
countries = proc () -> do
  (_, personName, personCityId) <- personTable  -< ()
  countryName <- countryNameOfCity -< personCityId
  livesIn -< (personName, countryName)
\end{minted}

\begin{minted}{haskell}
[ "Alice lives in UK",
  "Bob lives in UK",
  "Charlie lives in UK",
  "Dan lives in US" ]
\end{minted}
}

\end{frame}



\begin{frame}
\frametitle{Summary}

\Large{
Opaleye is an approach to relational queries which is

\begin{itemize}
\item type safe
\item composable
\end{itemize}

I didn't have time to talk about

\begin{itemize}
\item aggregation is type safe and composable
\item this is why we use Arrows rather than Monads
\item both HaskellDB and Esqueleto get this wrong
\end{itemize}
}
\end{frame}



\begin{frame}[fragile]
\center{
\image{Images/aggregation.png}
}

\vspace{2em}

\begin{minted}{haskell}
partsTable :: Query (Wire Part, Wire Location,
                     Wire Int, Wire Double)

aggregate (p4 (groupBy, groupBy, sum, max)) partsTable
    :: Query (Wire Part, Wire Location,
              Wire Int, Wire Double)
\end{minted}

\end{frame}


\begin{frame}[fragile]

Can't aggregate.
\begin{minted}{haskell}
QueryArr (Wire a, Wire b, Wire c) (Wire Part, Wire Location,
                                   Wire Int, Wire Double)
\end{minted}

Can aggregate.  Probably bad.
\begin{minted}{haskell}
Wire a -> Wire b -> Wire c
            -> QueryMonad (Wire Part, Wire Location,
                           Wire Int, Wire Double)
\end{minted}

\end{frame}



\end{document}
