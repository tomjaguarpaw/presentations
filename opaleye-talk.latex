\documentclass[10pt]{beamer}

\usepackage{minted}

\title{Opaleye}

\author{Tom Ellis}

\date{10th January 2013}

\begin{document}

\maketitle

\begin{frame}[fragile]
\frametitle{Tables of tuples}

\large{
\begin{minted}{haskell}
personTable :: Query (Wire PersonId, Wire String,
                      Wire CityId)

runQueryDefault personTable :: [(PersonId, String,
                                 CityId)]
\end{minted}

\begin{minted}{sql}
SELECT person_id, person_name, person_city_id
FROM person_table
\end{minted}

\begin{minted}{haskell}
[ (PersonId 1, "Tom", CityId 1),
  (PersonId 2, "Simon", CityId 1),
  (PersonId 3, "Duncan", CityId 2),
  (PersonId 4, "Clemens", CityId 3) ]
\end{minted}

\begin{itemize}
\item There are no restrictions on what Haskell datatypes you can
  store Wires in.  You can use Haskell records, lenses, etc\. ...
\end{itemize}
}
\end{frame}

\begin{frame}[fragile]
\frametitle{A query}

\Large{
\begin{itemize}
\item for each person
\item look up their city
\item look up that city's country
\item return ``\emph{person name} lives in \emph{country name}''
\end{itemize}
}

\end{frame}
\begin{frame}[fragile]
\frametitle{A query}

\large{
\begin{minted}{haskell}
countries :: Query (Wire String)
countries = proc () -> do
  (_, personName, personCityId) <- personTable  -< ()
  (cityId, _, cityCountryId)    <- cityTable    -< ()
  (countryId, _, countryCode)   <- countryTable -< ()

  restrict <<< eq -< (personCityId, cityId)
  restrict <<< eq -< (cityCountryId, countryName)

  lives_in_string <- constant " lives in " -< ()
  cat3 -< (personName, lives_in_string, country_code)
\end{minted}
}
\end{frame}

\begin{frame}[fragile]
\frametitle{A query}

\large{
\begin{minted}{sql}
SELECT person_name || ' lives in ' || country_name
FROM   person_table, city_table, country_table
WHERE  person_city_id = city_id
AND    city_country_id = country_id
\end{minted}
}

\end{frame}

\begin{frame}[fragile]
\frametitle{Type safety}

\large{
Errors prevented at compile time

\begin{itemize}
\item Comparing an (integer) ID and a string

\begin{minted}{haskell}
    ...
    restrict <<< eq -< (cityId, personName)
    ...
\end{minted}

\item Comparing two incompatible IDs even though they are both
  integers in the database

\begin{minted}{haskell}
    ...
    restrict <<< eq -< (cityId, personId)
    ...
\end{minted}

\end{itemize}
}

\end{frame}

\begin{frame}[fragile]
\frametitle{Composability}

\begin{minted}{haskell}

livesIn :: QueryArr (Wire String, Wire String) (Wire String)
livesIn = proc (personName, countryName) -> do
    lives_in_string <- constant " lives in " -< ()
    cat3 -< (personName, lives_in_string, countryName)

countryOfCity :: QueryArr (Wire CityId) (Wire CountryId)
countryOfCity = proc cityId -> do
    (cityId', _, cityCountryId)   <- countryTable -< ()
    restrict <<< eq -< (cityId, cityCountryId)
    returnA -< cityCountryId

countryNameOfCountry :: QueryArr (Wire CountryId) (Wire String)
...

countryNameOfCity :: QueryArr (Wire CityId) (Wire String)
countryNameOfCity = countryNameOfCountry <<< countryOfCity
\end{minted}

\end{frame}

\begin{frame}[fragile]
\frametitle{Composability}

\large{
\begin{minted}{haskell}
countries :: Query (Wire String)
countries = proc () -> do
  (_, personName, personCityId) <- personTable  -< ()
  countryName <- countryNameOfCity -< personCityId
  livesIn -< (personName, countryName)
\end{minted}

\begin{minted}{haskell}
[ "Tom lives in UK",
  "Simon lives in UK",
  "Duncan lives in UK",
  "Clemens lives in NL" ]
\end{minted}
}

\end{frame}

\begin{frame}
\frametitle{Summary}

\Large{
Opaleye is an approach to relational queries which is

\begin{itemize}
\item type safe
\item composable
\end{itemize}

I didn't have time to talk about

\begin{itemize}
\item aggregation is type safe and composable
\item this is why we use Arrows rather than Monads
\item both HaskellDB and Esqueleto get this wrong
\end{itemize}
}
\end{frame}

\end{document}
